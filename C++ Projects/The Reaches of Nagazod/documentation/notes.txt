Intent: text-based rpg dungeon-crawler
theme: old school dnd (3e) 

NOTES------------------------------------

### Files
save.cpp --> meant to handle saving and loading
interface.cpp --> meant to handle generating interface that player looks at
dungeon_layout.cpp --> handles the actual generation of a floor (random with boundaries)
dungeon_pop.cpp --> populates the generated floor with loot, monsters, etc.
game.cpp --> meant to pull everything together and provides game loop logic
        |
        +----> needs to be able to handle player input

### Floor Layout Logic
    - Set number of rooms: 
    - Max boundaries of each room: 
    - Max boundary of the floor: 
    - Boundaries are immutable
    - some walls can be broken through, some cannot (they lead to space on the other side)
    - Have airlocks?

### Floor Propogation Logic
    - Determine amount of loot per floor:
    - Determine amount of monsters per floor (weaker -> more?): 
    - Determine relation between placed loot (storage chests?) and monsters (more loot == more monsters?)

### Monster Logic
    - Types of Monsters (are they monsters?):
    - Abilities of Monsters:
    - Do they drop loot? (maybe some):
    - Is it random chance that an encounter happens?
        -> Or do they move through the map towards the player?
        -> Both?
    - Is there a difficulty curve?

### Loot Logic
    - Weapons:
    - Consumables:
    - Armor:


### Player Logic


### Visual Appearence of Game
    - Minimap?
    - Character Portrait?
    - Monster Portrait?

### Design Decisions
    - const is used for non-mutator methods
    - use reference when copying by value is pointless (i.e. const PLAYER_STATS& /*<-- reference*/ stat_block())
    - [nodiscard] is used for having a compiler check if result is computed but ignored
    - noexcept -> tells compiler that "this function will not throw any exceptions"
        - use on accessors (returning a member should not be able to throw)