---

# Dungeon Crawler with Ncurses UI

## Overview

This project is a roguelike dungeon crawler developed for COM S 3270, Spring 2025 Programming Project 1.05: *User Interface with Ncurses*. In this game, you control a player character (PC) represented by `@` through a randomly generated dungeon. The dungeon contains rooms, corridors, and staircases that lead to new levels. Monsters populate the dungeon, and an event-driven (or round-robin currently) scheduling system governs turn order. The interface is built using the ncurses library.

## Features

- **Random Dungeon Generation:**  
  Generates a new dungeon layout each level with interconnected rooms and corridors.
  Moving between rooms means the previous room is permanently lost.
  
- **Ncurses-Based UI:**  
  Uses ncurses for dynamic screen updates, handling input, and rendering the dungeon, PC, and monsters.

- **Event Scheduling:**  
  Supports both a heap-based event queue and a round-robin scheduling option to manage turns.
  Currently the event-scheduling is purely round-robin, there are issues wuth the heap-based approach.

- **PC and Monster Interactions:**  
  Implements movement, collision detection, and combat interactions between the PC and monsters.
  Battle is decided by which character moves "on-top" of the other first; i.e. if the PC moves onto a square occupied
    by a monster, the monster is killed. Speed is also considered in a tie, the faster opponent wins.
  Monsters will try to attack each other.

- **Staircase Functionality:**  
  Allows the PC to traverse dungeon levels using `<` (up) and `>` (down) staircases.

## Requirements

- **Compiler:** G++
- **Libraries:**  
  - Ncurses library (install via: `sudo apt-get install libncurses5-dev libncursesw5-dev`)
  - POSIX support for functions like `usleep`. (currently unused)
  - C Libraries to make porting less painful
  - Professor's implementation of heap
  - Algorithm to use std::max

## Compilation

To compile the project, run:

``bash
make all
``
To clean the project, run:

``bash
make clean
``

## Running the Game

Run the game binary from the terminal. You can optionally pass the number of monsters as a command-line argument:

```bash
./dungeon [number_of_monsters]
```

For example:

```bash
./dungeon 10
```

## Controls / Key Bindings

### Movement
- **7 or y:** Move up-left  
- **8 or k:** Move up  
- **9 or u:** Move up-right  
- **4 or h:** Move left  
- **6 or l:** Move right  
- **1 or b:** Move down-left  
- **2 or j:** Move down  
- **3 or n:** Move down-right  

### Special Commands
- **.**: Go down stairs (only if standing on a down staircase)
- **,**: Go up stairs (only if standing on an up staircase)  
- **5, space, or .:** Rest for a turn (PC remains still; monsters still move)  
- **m:** Display the list of monsters (with symbols and positions relative to the PC)  
- **Arrow Keys:** Scroll the monster list (if the list exceeds the screen size)  
- **Escape:** Exit the monster list  
- **q:** Quit the game  
- **f**: Toggles Fog-Of-War (default is on)
- **g**: Enters into 'teleport' mode, further commands related to this are displayed at the top of the screen when in teleport mode.

## Gameplay

- The PC (`@`) is controlled via the keyboard using keys.
- Monsters and the PC take turns based on the scheduling system .
- The dungeon is regenerated upon using a staircase.
- The game ends when the PC is killed or all monsters are defeated.
